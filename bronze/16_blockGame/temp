#include <iostream>
#include <vector>
#include <math.h>
#include <map>
#include <fstream>

using namespace std;

struct block {
    string front;
    string back;
};

int current = -1;
string make_combinations(vector<block> blocks, vector<string> &combinations, int &numofblocks) {
    current++;
    if (current == numofblocks) {
        return "";
    }
    int x = combinations.size();
    if (current == 0) {
        combinations[0] = blocks[0].front;
        combinations[1] = blocks[0].back;
    }
    else {
        for (int i = 0; i < x; i++) {
            combinations.push_back(combinations[i] + blocks[current].front);
            combinations[i] += blocks[current].back;
        }
    }
    make_combinations(blocks, combinations, numofblocks);
    return "";
}




int main() {
    ifstream fIn("blocks.in");
    vector<int> alphabet(26, 0);
    int numofblocks;
    fIn >> numofblocks;
    vector<block> blocks(numofblocks);
    for (int i = 0; i < numofblocks; i++) {
        fIn >> blocks[i].front >> blocks[i].back;
    }
    vector<string> combinations(2);
    make_combinations(blocks, combinations, numofblocks);
    for (int i = 0; i < combinations.size(); i++) {
        vector<int> temp(26, 0);
        for(unsigned int j = 0; j<combinations[i].length(); j++) {
            char c = combinations[i][j];
            temp[c - 'a']++;
            if (alphabet[c - 'a'] < temp[c - 'a']) {
                alphabet[c - 'a'] ++;
            }
        }
    }
    ofstream fOut("blocks.out");
    for (int i = 0; i < 26; i++) {
        fOut << alphabet[i] << endl;
    }
}